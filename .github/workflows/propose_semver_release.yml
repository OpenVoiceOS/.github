name: Propose SemVer Release
on:
  workflow_call:
    inputs:
      branch:
        type: string
        default: dev
      action_branch:
        description: 'The shared action branch to checkout'
        type: string
        default: main
      python_version:
        description: 'The python version to use'
        type: string
        default: "3.8"
      version_file:
        description: 'The file location to read the version from'
        type: string
        default: version.py
      release_type:
        type: string
        description: 'The type of release to make'
        required: true
      changelog_file:
        type: string
        default: CHANGELOG.md
      

jobs:
  bump_version:
    runs-on: ubuntu-latest
    env:
      VERSION_FILE: ${{ github.workspace }}/action/package/${{ inputs.version_file }}
      TARGET_BRANCH: ${{ inputs.release_type == 'patch' && 'testing' || 'stable' }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      RELEASE_TYPE: ${{ inputs.release_type }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          path: action/package/
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          path: action/github/
          ref: ${{ inputs.action_branch }}
          repository: OpenVoiceOS/.github
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - name: Install Python Dependencies
        run: |
          pip install -r action/github/requirements/pip_base.txt
      - name: Set up Git Authentication
        run: |
          cd ${{ github.workspace }}/action/package/ 
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
      - name: Create Empty Branch
        run: |
          cd ${{ github.workspace }}/action/package/
          git fetch origin ${{ inputs.branch }}
          INITIAL_COMMIT=$(git rev-list --max-parents=0 ${{ inputs.branch }})
          AUTHOR_NAME=$(git show -s --format='%an' $INITIAL_COMMIT)
          AUTHOR_EMAIL=$(git show -s --format='%ae' $INITIAL_COMMIT)
          TARGET_BRANCH_EXISTS=$(git ls-remote --heads origin ${{ env.TARGET_BRANCH }} | wc -l)
          if [ "$TARGET_BRANCH_EXISTS" -eq "0" ]; then
            git checkout --orphan ${{ env.TARGET_BRANCH }}
            git rm --cached -r .
            git clean -fd
            git config user.name "$AUTHOR_NAME"
            git config user.email "$AUTHOR_EMAIL"
            git cherry-pick $INITIAL_COMMIT
            git push -u origin ${{ env.TARGET_BRANCH }} --force
            git checkout ${{ inputs.branch }}
          fi
      