name: Kickoff Testing Release
on:
  workflow_call:
    inputs:
      branch:
        type: string
        default: dev
      action_branch:
        description: 'The shared action branch to checkout'
        type: string
        default: main
      python_version:
        description: 'The python version to use'
        type: string
        default: "3.8"
      version_file:
        description: 'The file location to read the version from'
        type: string
        default: version.py
      release_type:
        type: string
        description: 'The type of release to make'
      subject:
        type: string
        description: 'Subject title of the push/pull request event to parse the release type.'
        required: false
      kickoff_pr:
        description: 'Whether to create a PR to mark the start of the testing phase or not'
        type: string
        default: 'false'
      locale_folder:
        type: string
        description: 'The folder location of the locale files'
        required: false
      update_intentfile:
        type: string
        description: 'The file location of the intent test file to update'
        required: false
      changelog_file:
        type: string
        description: 'The file location of the changelog'
        default: CHANGELOG.md

jobs:
  parse_conventional_commits:
    outputs:
      release_type: ${{ steps.parse.outputs.release_type }}
      was_pr: ${{ steps.parse.outputs.was_pr }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Package Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          path: action/package/
          fetch-depth: 0
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: OpenVoiceOS/.github
          ref: ${{ inputs.action_branch }}
          path: action/github/
      - name: Set up python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - name: Install Common System Dependencies
        run: |
          sudo apt update
          xargs sudo apt install -y < ${{ github.workspace }}/action/github/requirements/sys_deb_common_deps.txt
      - name: Install Common Python Requirements
        run: |
          pip install -r ${{ github.workspace }}/action/github/requirements/pip_base.txt
      # check if the last commit was due to a PR merge (needed below)
      - name: PR merge?
        run: |
          cd  ${{ github.workspace }}/action/package/
          LAST_COMMIT_SHA=$(git rev-parse HEAD)
          PR_NUMBER=$(curl --silent --show-error --header "Authorization: Bearer ${{ secrets.GH_PAT }}" "https://api.github.com/repos/${{ github.repository }}/commits/${LAST_COMMIT_SHA}/pulls" | jq '.[0].number')
          if [ -n "$PR_NUMBER" ]; then
            echo "was_pr=true" >> $GITHUB_OUTPUT
          else
            echo "was_pr=false" >> $GITHUB_OUTPUT
          fi
      - name: Parse Conventional Commits
        id: parse
        run: |
          export TITLE="${{ inputs.subject }}"
          cd ${{ github.workspace }}/action/github
          RELEASE_TYPE=$(python scripts/parse_semver_release.py)
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
  autotranslate:
    needs: parse_conventional_commits
    runs-on: ubuntu-latest
    outputs:
      translated: ${{ steps.changes.outputs.translated }}
    permissions:
      contents: write
    env:
      API_KEY: ${{secrets.DL_API_KEY}} 
      LOCALE_FOLDER: ${{ github.workspace }}/action/package/${{ inputs.locale_folder }}
      INTENT_TEST_FILE: ${{ github.workspace }}/action/package/${{ inputs.update_intentfile }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          path: action/package/
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: OpenVoiceOS/.github
          ref: ${{ inputs.action_branch }}
          path: action/github/
      - uses: dorny/paths-filter@v2
        if: ${{ inputs.locale_folder != '' }}
        id: filter
        with:
          working-directory: action/package/
          filters: |
            us_specific:
              - '${{ inputs.locale_folder }}/en-us/**'
              - '${{ inputs.locale_folder }}/../dialog/en-us/**'
              - '${{ inputs.locale_folder }}/../vocab/en-us/**'
            general:
              - '${{ inputs.locale_folder }}/**'
              - '${{ inputs.locale_folder }}/../dialog/**'
              - '${{ inputs.locale_folder }}/../vocab/**'
      - name: Setup Python
        if: steps.filter.outputs.general == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - name: Install Python Requirements
        if: steps.filter.outputs.general == 'true'
        run: |
          python -m pip install -r action/github/requirements/pip_translation.txt
      - name: Pull latest changes
        if: steps.filter.outputs.general == 'true'
        run: |
          git pull origin ${{ inputs.branch }}
      - name: Auto Translate
        if: steps.filter.outputs.general == 'true'
        run: |
          python action/github/scripts/translate.py
      # 0 if no changes were made, 1 if changes were made
      - name: changes made?
        id: changes
        run: |
          cd ${{ github.workspace }}/action/package/
          git diff --exit-code
          echo "translated=$?" >> $GITHUB_OUTPUT
      - name: Commit autotranslation to ${{ inputs.branch }}
        if: steps.changes.outputs.translated == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci(localisation): autotranslate common languages"
          repository: action/package/
          branch: ${{ inputs.branch }}
      - name: update resource test file
        if: steps.changes.outputs.translated == '1' && inputs.update_intentfile != ''
        run: |
          python action/github/scripts/update_intent_testfile.py
      - name: Commit resource test file changes to ${{ inputs.branch }}
        if: steps.changes.outputs.translated == '1' && inputs.update_intentfile != ''
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci(localisation): update resource test file"
          repository: action/package/
          branch: ${{ inputs.branch }}
  # alpha release
  alpha_release:
    needs: parse_conventional_commits
    if: (inputs.kickoff_pr == 'false' && contains(fromJson('["patch", "minor", "major"]'), needs.parse_conventional_commits.outputs.release_type)) || (inputs.kickoff_pr == 'false' && contains(fromJson('["patch", "minor", "major"]'), inputs.release_type)) || (inputs.release_type == 'alpha') || (contains(fromJson('["alpha", "testing"]'), needs.parse_conventional_commits.outputs.release_type))
    uses: openvoiceos/.github/.github/workflows/release_alpha.yml@feat/shared_actions1
    secrets: inherit
    with:
      action_branch: ${{ inputs.action_branch }}
      version_file: ${{ inputs.version_file }}
      python_version: ${{ inputs.python_version }}
      changelog_file: ${{ inputs.changelog_file }}
  # >= patch release
  kickoff_testing:
    needs: parse_conventional_commits
    if: (contains(fromJson('["patch", "minor", "major"]'), needs.parse_conventional_commits.outputs.release_type) || (inputs.release_type != 'alpha' && inputs.release_type != ''))
    permissions:
      contents: write
    runs-on: ubuntu-latest
    env:
      TARGET_BRANCH: 'testing'
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      RELEASE_TYPE: ${{ needs.parse_conventional_commits.outputs.release_type }}
    steps:
      - name: Checkout Package Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: ${{ inputs.branch }}
          path: action/package/
          fetch-depth: 0
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: OpenVoiceOS/.github
          ref: ${{ inputs.action_branch }}
          path: action/github/
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh
      - name: Authenticate GitHub CLI
        run: |
          unset GITHUB_TOKEN
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
      - name: Set up python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - name: Install Common Python Requirements
        run: |
          pip install -r ${{ github.workspace }}/action/github/requirements/pip_base.txt
      - name: Check Latest Release
        if: ${{ inputs.kickoff_pr == 'true' }}
        run: |
          SINCE_TAG=$(python ${{ github.workspace }}/action/github/scripts/semver_cycle_start.py)
          echo "SINCE_TAG=${SINCE_TAG}" >> $GITHUB_ENV
      - name: create changelog
        id: changelog
        if: ${{ inputs.kickoff_pr == 'true' }}
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GH_PAT }}
          sinceTag: ${{ env.SINCE_TAG }}
      # if there is no testing branch, create one from the tag of the latest release
      - name: Create testing Branch (if necessary)
        run: |
          cd ${{ github.workspace }}/action/package/
          TARGET_BRANCH_EXISTS=$(git ls-remote --heads origin ${{ env.TARGET_BRANCH }} | wc -l)
          INITIAL_COMMIT=$(git rev-list --max-parents=0 ${{ inputs.branch }})
          if [ "$TARGET_BRANCH_EXISTS" -eq "0" ]; then
            if [ "$SINCE_TAG" == "0.0.0" ]; then
              git checkout -b ${{ env.TARGET_BRANCH }} $INITIAL_COMMIT
            else
              git checkout -b ${{ env.TARGET_BRANCH }} tags/${{ env.SINCE_TAG }}
            fi            
            git push origin ${{ env.TARGET_BRANCH }} --force
            git checkout ${{ inputs.branch }}
          fi
      - name: Create Pull Request to ${{ env.TARGET_BRANCH }}
        if: ${{ inputs.kickoff_pr == 'true'}}
        run: |
          cd ${{ github.workspace }}/action/package/
          gh pr create \
          --title "ci(release): kickoff testing QA phase (${{ env.RELEASE_TYPE }} release)" \
          --body "This kicks off the testing QA phase of a ${{ env.RELEASE_TYPE }} release.\nPlease merge if it the testing phase should start. Version gets bumped to the next ${{ env.RELEASE_TYPE }} version.\n\n(If there's the need to delay, after merging this PR recent changes gets automatically pulled to start the testing phase.)\n\nIncluded changes:\n${{ steps.changelog.outputs.changelog }}" \
          --base ${{ env.TARGET_BRANCH }} \
          --head dev \
          --assignee ${{ github.actor }}
      - name: Push to testing branch
        if: ${{ inputs.kickoff_pr == 'false' }}
        run: |
          cd ${{ github.workspace }}/action/package/
          git checkout ${{ env.TARGET_BRANCH }}
          git pull origin ${{ env.TARGET_BRANCH }}
          git rebase ${{ inputs.branch }}
          git push origin ${{ env.TARGET_BRANCH }}
      - name: Bump Version
        if: ${{ inputs.kickoff_pr == 'false' }}
        uses: ./action/github/.github/actions/release_semver_versioning
        with:
          release_type: ${{ env.RELEASE_TYPE }}
          version_file: ${{ inputs.version_file }}
      - name: Notify Matrix Room
        uses: ./action/github/.github/actions/notify_testing_matrix
        with:
          matrix_token: ${{ secrets.MATRIX_TOKEN }}
          kickoff_pr: ${{ inputs.kickoff_pr }}
          subject: ${{ inputs.subject }}
          release_type: ${{ env.RELEASE_TYPE }}
  # testing release
  # note: autotranslate as dependency requires the job running without restrictions!
  cherry_pick_testing:
    needs: ["parse_conventional_commits", "autotranslate"]
    if: ${{ needs.parse_conventional_commits.outputs.release_type == 'testing' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev
          path: action/package/dev/
      - name: Checkout testing branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          ref: testing
          path: action/package/testing/
      # based on the workflow run, set the number of commits to cherry pick
      # testing PRs/pushes get an alpha release for sure
      - name: set commits num to cherry pick
        run: |
          COMMITS = 1
          if [ "${{ needs.parse_conventional_commits.outputs.was_pr }}" == "true" ]; then
            COMMITS = $((COMMITS + 2))
          else
            COMMITS = $((COMMITS + 1))
          fi
          if [ "${{ needs.autotranslate.outputs.translated }}" == "1" ]; then
            COMMITS = $((COMMITS + 1))
          fi
          echo "COMMITS=${COMMITS}" >> $GITHUB_ENV
      - name: Cherry pick n last commit from dev
        run: |
          cd action/package/testing/
          git cherry-pick $(git -C ../dev log -n ${{ env.COMMITS }} --pretty=format:"%H")
      - name: Push changes to testing branch
        run: |
          cd action/package/testing/
          git push origin testing
