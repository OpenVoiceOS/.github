# This workflow will generate a distribution and upload it to PyPI

name: Publish Alpha Build ...aX
on:
  workflow_call:
    inputs:
      branch:
        description: 'The branch to checkout and run the action in'
        type: string
        default: ${{ github.ref }}
      version_file:
        description: 'The file location to read the version from'
        type: string
        default: version.py
      python_version:
        description: 'The python version to use'
        type: string
        default: "3.8"
      locale_folder:
        description: 'The base folder to look for localization files'
        type: string
        default: "locale"

jobs:
  autotranslate:
    runs-on: ubuntu-latest
    env:
      API_KEY: ${{secrets.DL_API_KEY}} 
      LOCALE_FOLDER: ${{ github.workspace }}/action/package/${{ inputs.locale_folder }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          path: action/package/
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: OpenVoiceOS/.github
          path: action/github/
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          working-directory: action/package/
          filters: |
            locales:
              - '${{ inputs.locale_folder }}/en-us/**'
              - '${{ inputs.locale_folder }}/../dialog/en-us/**'
              - '${{ inputs.locale_folder }}/../vocab/en-us/**'
      - name: Setup Python
        if: steps.filter.outputs.locales == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - name: Auto Translate
        if: steps.filter.outputs.locales == 'true'
        run: |
          python -m pip install -r action/github/requirements/translation.txt
          python action/github/scripts/translate.py
      - name: Commit to dev
        if: steps.filter.outputs.locales == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: autotranslate
          repository: action/package/
    
  build_and_publish:
    runs-on: ubuntu-latest
    env:
      VERSION_FILE: ${{ github.workspace }}/action/package/${{ inputs.version_file }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          path: action/package/
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: OpenVoiceOS/.github
          path: action/github/
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - name: Increment Version
        id: version
        run: |
          python action/github/scripts/bump_alpha.py
          echo "::set-output name=version::$(python action/package/setup.py --version)"
      - name: "Generate release changelog"
        id: changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          output: action/package/
      - name: Push Version Change
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Increment Version to ${{ steps.version.outputs.version }}
          repository: action/package/
      - name: Change working directory to release
        run: cd ${{ github.workspace }}/action/package/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: V${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            Changes in this Release
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: true
          commitish: ${{ inputs.branch }}
      - name: Install Build Tools
        run: |
          python -m pip install build wheel
      - name: Build Distribution Packages
        run: |
          cd action/package
          python setup.py sdist bdist_wheel
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{secrets.PYPI_TOKEN}}
          packages-dir: action/package/dist/
